{"version":3,"sources":["Components/RecordList.js","Components/CalenderData.js","Components/PersonList.js","App.js","serviceWorker.js","index.js"],"names":["RecordList","className","this","props","selectUsers","map","e","key","splitArry","end_time","split","style","marginLeft","color","nameDisplay","start_time","Component","CalenderData","state","LoginSession","console","log","setState","caleData","PersonList","persons","SelectedUserData","SelectedUserNames","MessageDisplay","startDate","Date","isMatchFound","SelectedUseID","FinalCalenderData","handleChange","date","handleSubmit","temArry","preventDefault","CurDate","ConvertingDateToString","getDate","getMonth","getFullYear","per","index","real_name","id","act_period","activity_periods","d","NewDate","NewDateString","push","length","alert","onReportClick","axios","get","then","res","data","members","Row","Col","sm","paddingLeft","onClick","onSubmit","selected","onChange","name","dateFormat","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1858fb15.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass RecordList extends Component {\n    render() {\n        // console.log(\"activity_periods-this.props.selectUsers\", this.props.selectUsers)\n        // console.log(\"activity.NameDisplay\", this.props.nameDisplay)\n        return (\n            <div className=\"RecordList\">\n\n                   {\n                        this.props.selectUsers.map((e, key)=>{\n                            const splitArry = e.end_time.split(' ')\n                           // console.log(\"splitArry\", splitArry)\n                            //const arr = splitArry[3]\n                           // console.log(\"mmmm\", arr)\n                            //console.log(\"eeeeee\", e)\n                        return(\n                            \n                            <div style={{ marginLeft: \"55px\", color: \"#7c795d\"}}>\n                                    {this.props.nameDisplay+ \" : \"}\n                                    \n                                    {e.start_time+ \" - \"}\n                                    {/* {\" \" +e.end_time} */}\n                                    {splitArry[3]}\n                            </div>\n                        )\n                        })\n                    }\n            </div>  \n        );\n    }\n}\n\nexport default RecordList;\n","import React, { Component } from 'react';\n\nclass CalenderData extends Component {\nconstructor(props){\n    super(props)\n\n    this.state ={\n\n        LoginSession:[],\n\n    }\n}\n\n\ncomponentDidMount(){\n\n    console.log(\"componet1234\")\n\nthis.setState({\n    LoginSession:this.props.caleData\n})\n\n}\n\n  \n    render() {\n      //  console.log(\"calender data displaying\", this.props.caleData)\n       console.log(\"calender data displaying\", this.state.LoginSession)\n        return (\n            <div>\n                {\n                    this.props.caleData.map((e)=>{\n\n                        const splitArry = e.end_time.split(' ')\n                       // const arr = splitArry[3]\n\n                        console.log(\"FINALLLLLdisplaying\", e.start_time)\n                        return(\n                            <div style={{color: \"#7c795d\"}}>\n                                 {this.props.nameDisplay+ \" : \"}\n                                {e.start_time+ \" - \"}\n                                {splitArry[3]}\n                            </div>\n\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default CalenderData;","import React from 'react';\nimport axios from 'axios';\nimport './PersonList.css';\nimport { Row, Col } from 'react-bootstrap';\nimport DatePicker from \"react-datepicker\";\n// import moment from 'moment';\n//import Moment from 'react-moment';\n//import 'moment-timezone';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RecordList from './RecordList';\nimport CalenderData from './CalenderData';\n\n\n\n\nexport default class PersonList extends React.Component {\n  state = {\n    persons: [],\n    SelectedUserData: [],\n    SelectedUserNames:'',\n    MessageDisplay:\"Record List Hee\",\n    startDate: new Date(),\n    isMatchFound: false,\n    SelectedUseID: '',\n    FinalCalenderData:[]\n  };\n\n  handleChange = date => {\n    this.setState({\n      startDate: date\n    });\n\n    console.log(\"handleChangeCurTime\",date )\n  };\n\n  handleSubmit=(date)=> {\n\n    if(this.state.SelectedUseID === ''){\n      alert(\"Please Select a User in UserList First\")\n      return\n    }\n   \n\n    let temArry =[]\n    date.preventDefault();\n    console.log(\"this.state.SelectedUseID\", this.state.SelectedUseID)\n\n\n    const CurDate = this.state.startDate;\n    //console.log(\"CurDate\", CurDate)\n\n    const ConvertingDateToString = CurDate.getDate() + \"-\" + (CurDate.getMonth()+1) + \"-\" + CurDate.getFullYear() \n    console.log(\"CurDate\", ConvertingDateToString)\n\n    let CompanyDate = this.state.persons.map((per, index)=>{\n\n      console.log(\"real_namereal_name :-\", per.real_name)\n\n      if(this.state.SelectedUseID === per.id){\n        \n        const act_period = per.activity_periods;\n        console.log(\"act_period :-\", act_period)\n  \n       \n        act_period.map((d)=>{\n           \n         // console.log(\"ddd\",d.start_time)\n  \n          const splitArry = d.start_time.split('  ')\n          //console.log(\"splitArry\",splitArry)\n  \n          const NewDate= new Date(splitArry[0]);\n  \n          //console.log(\"NewDate\",NewDate)\n  \n          const NewDateString = NewDate.getDate() + \"-\" + (NewDate.getMonth()+1) + \"-\" + NewDate.getFullYear()\n  \n          //console.log(\"NewDateString\",NewDateString)\n  \n          // console.log(\"isMatchFound\", ConvertingDateToString)\n          // console.log(\"NewDateString\", NewDateString)\n          if(ConvertingDateToString === NewDateString){\n  \n            console.log(\"Its mached!\")\n            // this.state.FinalCalenderData\n           \n            temArry.push(d)\n            //this.state.FinalCalenderData.push(d)\n            // this.setState({\n            //   FinalCalenderData: temArry\n            // })\n            console.log(\"temArry!\", this.state.FinalCalenderData)\n            console.log(\"Its mached!\")\n            console.log(\"isMatchFound\", this.state.isMatchFound)\n          }\n  \n          else{\n  \n            console.log(\"Its not maching!!!\")\n          }\n      \n        })\n\n      }\n\n\n\n    })\n            this.setState({\n             FinalCalenderData: temArry\n            })\n\n           if(temArry.length === 0){\n            alert(\"No data available for selected Date: \" + ConvertingDateToString)\n            }\n\n  }\n\n\n  componentDidMount() {\n    axios.get(`https://raw.githubusercontent.com/mjroidu/Dummy-Data/master/DummyJson`)\n      .then(res => {\n          console.log(\"Checking Data\", res)\n        const persons = res.data.members;\n        this.setState({ persons });\n      })\n  }\n\n  onReportClick=(per)=>{\n    this.setState({\n      SelectedUserData: per.activity_periods,\n      SelectedUserNames:per.real_name,\n      SelectedUseID: per.id\n\n    })\n    console.log(\"selectedReport\", per)\n    \n  }\n\n\n  render() {\n      console.log(\"this.state.persons\", this.state.persons)\n\n    return (\n\n<div>\n    <div className={\"leftPanel\"}>\n      <Row>\n      <Col sm={5}> \n    <h4> User List: Click to Display Records</h4> \n        \n              {\n                this.state.persons.map((per, index) =>{\n                return (\n                  <Col key={index} className ={\"paddingVertical\"}>\n                    <div className={\"labelStyle \"}>\n                    <li style={{ color:(this.state.SelectedUserNames=== per.real_name ? '#DC143C' : 'black'), paddingLeft: \"10px\"} } onClick={(e)=>this.onReportClick(per)}>\n                    {per.real_name}\n                    </li>\n                    </div>\n                    </Col>\n                )\n                }\n                )\n              }\n    \n      </Col>\n      \n  <Col sm={4} className=\"list\">\n          \n          <div className = \"container\">\n            <form onSubmit={ this.handleSubmit }>\n              <div className=\"form-group\">\n                  <label>Select Date: </label>\n                  <DatePicker\n                    selected={ this.state.startDate }\n                    onChange={ this.handleChange }\n                    name=\"startDate\"\n                    dateFormat=\"MM/dd/yyyy\"\n                  />\n                </div>\n    \n                <div className=\"form-group\">\n                  <button className=\"btn btn-success\">Submit Date</button>\n                </div>\n            </form>\n          </div>\n    \n        </Col>\n\n      </Row>\n    \n       \n\n           \n    <Row>\n    <Col sm={5}>\n          <div>\n              <RecordList  \n              selectUsers={this.state.SelectedUserData}\n              nameDisplay = {this.state.SelectedUserNames}\n              />\n          </div>\n      </Col>\n\n      <Col sm={4}>\n        <div>\n          <CalenderData \n           nameDisplay = {this.state.SelectedUserNames}\n          caleData = {this.state.FinalCalenderData} />\n        </div>\n    </Col>\n    \n      </Row>     \n    </div>\n</div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\n//import ListOfUsers from './Components/ListOfUsers'\nimport PersonList  from './Components/PersonList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <h2>FullThrottle Labs Assignment</h2>\n        <PersonList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import Index1 from './Application/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}